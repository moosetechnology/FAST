"
I am generating a CopyVisitor that will create adeep copy of an AST for any meta-model

I generate the #visitXYZ: methods in the visitor.
I assume the meta-model entities already have #accept: methods (generated by my superclass)
To use:
```
FASTCopyVisitorCodeGenerator new
	rootClass: FASTXYZEntity visitorClass: FASTXYZVisitor
```

"
Class {
	#name : #FASTCopyVisitorCodeGenerator,
	#superclass : #FASTVisitorCodeGenerator,
	#instVars : [
		'metamodel',
		'package'
	],
	#category : #'FAST-Core-Tools-VisitorGenerator'
}

{ #category : #Fame }
FASTCopyVisitorCodeGenerator >> fmDescription: aModelClass [

	^metamodel descriptionOf: aModelClass ifAbsent: [  nil ]
]

{ #category : #Fame }
FASTCopyVisitorCodeGenerator >> fmPackage: aModelClass [

	^(self fmDescription: aModelClass) package
]

{ #category : #Fame }
FASTCopyVisitorCodeGenerator >> fmSuperclass: aModelClass [

	| superclass |
	superclass := (self fmDescription: aModelClass) superclass.
	^(superclass name = 'Entity')
		ifTrue: [ nil ]
		ifFalse: [ superclass ]

]

{ #category : #'code generation' }
FASTCopyVisitorCodeGenerator >> generateCopyMethod: aFASTVisitorClass [

	| code |
	code := 'copy: aNode

	aNode ifNil: [ ^nil ].
	aNode isLiteral ifTrue: [ ^aNode ].
	aNode isCollection ifFalse: [ ^aNode accept: self ].
	^aNode collect: [ :each | self copy: each ]
'.

	aFASTVisitorClass compile: code classified: #copying
]

{ #category : #'code generation' }
FASTCopyVisitorCodeGenerator >> generateObjectCopy: aModelClass in: stream [

	stream
		tab;
		<< '^' ;
		<< (aModelClass name) ;
		<< ' new';
		cr
]

{ #category : #'code generation' }
FASTCopyVisitorCodeGenerator >> generatePropertiesCopy: aModelClass in: stream [

	(self fmDescription: aModelClass)
		ifNotNil: [ :fmDescription |
			fmDescription allProperties do: [ :property |
				(self shouldCopyProperty: property for: aModelClass)
					ifTrue: [ self generatePropertyCopy: property for: aModelClass in: stream ]
			]
		]
]

{ #category : #'code generation' }
FASTCopyVisitorCodeGenerator >> generatePropertyCopy: property for: aModelClass in: stream [

	stream
		tab ;
		tab ;
		<< (property implementingSelector) ;
		<< ': (self copy: ' ;
		<< (self asParameterName: aModelClass) ;
		space ;
		<< (property implementingSelector) ;
		<< ') ;' ;
		cr

]

{ #category : #'code generation' }
FASTCopyVisitorCodeGenerator >> generateVisit: aModelClass in: aVisitorClass [

	| code |
	code := String streamContents: [ :outputStream |
		self generateVisitSelectorFor: aModelClass in: outputStream.
		self generatePragmaIn: outputStream.
		outputStream cr.

		self generateVisitBody: aModelClass in: outputStream.
	].

	aVisitorClass compile: code classified: #visiting
]

{ #category : #'code generation' }
FASTCopyVisitorCodeGenerator >> generateVisitBody: aModelClass in: stream [

	self generateObjectCopy: aModelClass in: stream.
	self generatePropertiesCopy: aModelClass in: stream.
	stream
		tab;
		tab;
		<< 'yourself';
		cr
]

{ #category : #'code generation' }
FASTCopyVisitorCodeGenerator >> generateVisitSelectorFor: aModelClass in: outputStream [

	self generateVisitSelectorFor: aModelClass parameter: (self asParameterName: aModelClass) in: outputStream
]

{ #category : #Fame }
FASTCopyVisitorCodeGenerator >> isSamePackage: aFMProperty [

	^package = aFMProperty mmClass package
]

{ #category : #'accessing - private tests' }
FASTCopyVisitorCodeGenerator >> metamodel [

	^ metamodel
]

{ #category : #'accessing - private tests' }
FASTCopyVisitorCodeGenerator >> metamodel: anObject [

	metamodel := anObject
]

{ #category : #'accessing - private tests' }
FASTCopyVisitorCodeGenerator >> package [

	^ package
]

{ #category : #'accessing - private tests' }
FASTCopyVisitorCodeGenerator >> package: anObject [

	package := anObject
]

{ #category : #run }
FASTCopyVisitorCodeGenerator >> rootClass: aFASTEntityClass visitorClass: aFASTVisitorClass [

	self generateCopyMethod: aFASTVisitorClass.

	metamodel := aFASTEntityClass metamodel.
	package := (self fmPackage: aFASTEntityClass).

	aFASTEntityClass withAllSubclassesDo: [ :modelClass |
		self generateVisit: modelClass in: aFASTVisitorClass.
	].
]

{ #category : #'code generation' }
FASTCopyVisitorCodeGenerator >> shouldCopyProperty: property for: aModelClass [

	(#(startPos endPos) anySatisfy: [ :specialCase | property name = specialCase ])
		ifTrue: [ ^true ].

	(property hasOpposite and: [ property isTarget ]) ifTrue: [ ^false].
	property isContainer ifTrue: [ ^false].
	(self isSamePackage: property) ifFalse: [ ^false ].

	^true
]
