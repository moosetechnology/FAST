"
Use me to generate the MetaModel of FAST

NOTE: I generate the Core FAST Model and the Java FAST Model because we can't currently do `resetMetadata` with extended metamodel generated by FamixNG
"
Class {
	#name : #FASTMetamodelGenerator,
	#superclass : #FamixMetamodelGenerator,
	#instVars : [
		'entity',
		'tWithArguments',
		'tWithParameters',
		'tEntity',
		'tExpression',
		'tLiteral',
		'tBooleanLiteral',
		'tCharacterLiteral',
		'tNullPointerLiteral',
		'tStringLiteral',
		'tVariableExpression',
		'tScopableEntity',
		'tBehaviouralEntity',
		'tNamedBehaviouralEntity',
		'tStatement',
		'tExpressionStatement',
		'tReturnStatement',
		'tStatementBlock',
		'tNamedEntity',
		'tInvocation',
		'tNumericalLiteral',
		'tAssignment',
		'tVariableEntity',
		'tComment',
		'tWithComments',
		'tBinaryExpression',
		'tUnaryExpression'
	],
	#category : #'FAST-Model-Generator'
}

{ #category : #accessing }
FASTMetamodelGenerator class >> packageName [

	^ #'FAST-Core-Model'
]

{ #category : #accessing }
FASTMetamodelGenerator class >> prefix [
	^ #FAST
]

{ #category : #accessing }
FASTMetamodelGenerator class >> submetamodels [ 
	^ { FamixGenerator }
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTAssignment [
	^ 'A node representing an assignment'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTBehaviouralEntity [
	^ 'Represents a generic behavioural entity which has parameters and local variables, as well as statements. 

Can represent a SmalltalkBlock, or a JavaLambda
Subclassed for NamedBehavioural as methods/functions

Has parameters , and a body (StatementBlock).
Local variables are intended to be stored in the local entities of the body'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTBinaryExpression [
	^ 'A trait representing a binary expression of a node of a source code.'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTBooleanLiteral [
	^ 'A boolean literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTCharacterLiteral [
	^ 'A character literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTComment [

	^ 'FASTComment represents one instance of a comment (in the sense of programming language comments) for any FAST sourced entity. The commented sourced entity is called the container in the FAST model.'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTEntity [
	^ 'A FASTEntity is an abstract class for all FAST classes

Primarily introduced to deal with symbol resolution matters.'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTExpression [
	^ 'An abstract superclass representing an expression node of a source code.'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTExpressionStatement [
	^ 'A node of a statement which is representing a single expression. '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTInvocation [
	^ 'A invocation of a behavioural entity'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTLiteral [
	^ 'A literal node.

Contains a value for the literal.

FLAG: should refactor some literals to core-model
    e.g.: character, int, float, string, boolean '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTNamedBehaviouralEntity [
	^ '@FLAG: May be could be removed to have a simpler core model.
Each language would have to implement it correctly then

A behavioural entity that can be referenced with a name.

Assumed to correspond to a function or a method'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTNullPointerLiteral [
	^ 'An undefined object literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTNumericalLiteral [
	^ 'A numerical literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTReturnStatement [
	^ 'A return statement node. Contains a reference to the expression which is returned.  '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTScopableEntity [
	^ 'A Entity with an optional scope

Some statements are scopable because they allow to introduce local variables (e.g. for statement in Java)'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTStatement [
	^ 'An abstract subclass which represents a source code statemnet '
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTStatementBlock [
	^ 'A block of statements as ones in C-like langs with {}'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTStringLiteral [
	^ 'A string literal'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTUnaryExpression [
	^ 'A trait representing an unary expression of a node of a source code.'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTVariableEntity [
	^ 'A node for variable name not in a expression (example: assigned variable or parameter)'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTVariableExpression [
	^ 'A node that wraps around structural entity'
]

{ #category : #comments }
FASTMetamodelGenerator >> commentForTWithComments [

	^ ' For entities with comments. In FAST, they are called containers. '
]

{ #category : #definition }
FASTMetamodelGenerator >> defineClasses [
	super defineClasses.
	entity := builder newClassNamed: #Entity comment: 'any entity'. 
]

{ #category : #definition }
FASTMetamodelGenerator >> defineHierarchy [
	super defineHierarchy.
	tEntity --|> #TEntityMetaLevelDependency.
	tExpression --|> tEntity.
	entity --|> tEntity.
	
	tLiteral --|> tExpression.
	tBinaryExpression --|> tExpression.
	tUnaryExpression --|> tExpression.
	
	tBooleanLiteral --|> tLiteral.
	tCharacterLiteral --|> tLiteral.
	tNullPointerLiteral --|> tLiteral.
	tStringLiteral --|> tLiteral.
	tNumericalLiteral --|> tLiteral.
	tVariableExpression --|> tExpression.
	tScopableEntity --|> tEntity.
	
	tBehaviouralEntity --|> tScopableEntity.
	tBehaviouralEntity --|> tWithParameters.
	
	tNamedBehaviouralEntity --|> tBehaviouralEntity.
	tStatement --|> tEntity.
	tExpressionStatement --|> tStatement.
	tReturnStatement --|> tStatement.
	tStatementBlock --|> tStatement.
	
	tVariableExpression --|> tNamedEntity.
	tVariableEntity --|> tNamedEntity.
	tNamedBehaviouralEntity --|> tNamedEntity.
	
	tAssignment --|> tExpression.
	
	tInvocation --|> tExpression.
	tInvocation --|> tWithArguments.
	
	tNamedEntity --|> tEntity.
]

{ #category : #definition }
FASTMetamodelGenerator >> defineProperties [

	super defineProperties.
	(tLiteral property: #primitiveValue type: #String) comment:
		'The literal itself as found in the source code. We use primitiveValue in order to override value from Object'.

	tEntity
		property: #startPos type: #Number;
		property: #endPos type: #Number.

	tNamedEntity property: #name type: #String.
	
	((tComment property: #content type: #String) 
		comment: 'Content of the comment as a String').

	(tUnaryExpression property: #operator type: #String) comment:
		'Unary expression operator'.

	(tBinaryExpression property: #operator type: #String) comment:
		'Binary expression operator'.

]

{ #category : #definition }
FASTMetamodelGenerator >> defineRelations [
	super defineRelations.

	(((tExpressionStatement property: #expression) comment: 'The expression of the statement')
	<>- ((tExpression property: #expressionStatementOwner)
		comment: 'The expression statement that own me (if it''s the case')) .

	(((tReturnStatement property: #expression) comment: 'The expression returned')
	<>- ((tExpression property: #returnOwner)
		comment: 'The return statement that own the expression (if it''s the case)')) .

	(((tBehaviouralEntity property: #statementBlock) comment: 'Statements block of the behavioural entity')
	<>- ((tStatementBlock property: #fastBehaviouralParent)
		comment: 'Behavioural entity containing the statement block.')) .

	(((tStatement property: #statementContainer) comment: 'Block containing this statement.')
	*-<> ((tStatementBlock property: #statements) comment: 'Statements enclosed in this block')) .

	((tWithParameters property: #parameters) comment: 'My parameters')
	<>-* ((tVariableEntity property: #parameterOwner) comment: 'parameterOwner') . 

	((tWithArguments property: #arguments) comment: 'My arguments')
	<>-* ((tExpression property: #argumentOwner) comment: 'my owner') .

	((tAssignment property: #variable) comment: 'An assigned variable (lhs of assignment)')
	<>- ((tVariableEntity property: #parentAssignmentExpression)
		comment: 'Optional assignment to the variable').

	((tAssignment property: #expression) comment: 'Assigned expression (rhs of assignment)')
	<>- ((tExpression property: #assignedIn)
		comment: 'Optional assignment where this expression is used').

	((tUnaryExpression property: #expression) comment: '(sub-)expression in the unary expression')
	<>- ((tExpression property: #parentExpression) comment: 'Parent (unary) expression').

	((tBinaryExpression property: #leftOperand) comment: 'left part of a binary expression')
	<>- ((tExpression property: #parentExpressionLeft)
		comment: 'Parent (binary) expression of which I am left side').

	((tBinaryExpression property: #rightOperand) comment: 'left part of the expression')
	<>- ((tExpression property: #parentExpressionRight)
		comment: 'Parent (binary) expression of which I am right side').

	((tInvocation property: #invoked) comment: 'The name of the behavioural invoked')
	<>- ((tNamedEntity property: #invokedIn) comment: 'Optional invocation where this name is used').

	((tComment property: #container) comment: 'Source code entity containing the comment')
		*-<> ((tWithComments property: #comments)
			comment: 'list of comments defined in the entity').

]

{ #category : #definition }
FASTMetamodelGenerator >> defineTraits [
	super defineTraits.
	tWithArguments := builder newTraitNamed: #TWithArguments comment: 'I have arguments'. 
	
	tWithParameters := builder newTraitNamed: #TWithParameters comment: 'I have parameters'.
	
	tEntity := builder newTraitNamed: #TEntity comment: 'any entity'.
	tNamedEntity := builder newTraitNamed: #TNamedEntity comment: 'A entity with a name'.
	tExpression := builder newTraitNamed: #TExpression comment: self commentForTExpression.
	tBinaryExpression := builder newTraitNamed: #TBinaryExpression comment: self commentForTBinaryExpression.
	tUnaryExpression := builder newTraitNamed: #TUnaryExpression comment: self commentForTUnaryExpression.
	tLiteral := builder newTraitNamed: #TLiteral comment: self commentForTLiteral.
	tBooleanLiteral := builder newTraitNamed: #TBooleanLiteral comment: self commentForTBooleanLiteral.
	tCharacterLiteral := builder newTraitNamed: #TCharacterLiteral comment: self commentForTCharacterLiteral.
	tNullPointerLiteral := builder newTraitNamed: #TNullPointerLiteral comment: self commentForTNullPointerLiteral.
	tStringLiteral := builder newTraitNamed: #TStringLiteral comment: self commentForTStringLiteral.
	tNumericalLiteral := builder newTraitNamed: #TNumericalLiteral comment: self commentForTNumericalLiteral.
	tVariableExpression := builder newTraitNamed: #TVariableExpression comment: self commentForTVariableExpression.
	tScopableEntity := builder newTraitNamed: #TScopableEntity comment: self commentForTScopableEntity.
	tBehaviouralEntity := builder newTraitNamed: #TBehaviouralEntity comment: self commentForTBehaviouralEntity.
	tNamedBehaviouralEntity := builder newTraitNamed: #TNamedBehaviouralEntity comment: self commentForTNamedBehaviouralEntity.
	tStatement := builder newTraitNamed: #TStatement comment: self commentForTStatement.
	tStatement withTesting.
	tExpressionStatement := builder newTraitNamed: #TExpressionStatement comment: self commentForTExpressionStatement.
	tReturnStatement := builder newTraitNamed: #TReturnStatement comment: self commentForTReturnStatement.
	tStatementBlock := builder newTraitNamed: #TStatementBlock comment: self commentForTStatementBlock.
	tAssignment := builder newTraitNamed: #TAssignment comment: self commentForTAssignment.
	tInvocation := builder newTraitNamed: #TInvocation comment: self commentForTInvocation.
	tVariableEntity := builder newTraitNamed: #TVariableEntity comment: self commentForTVariableEntity.
	
	tComment := builder newTraitNamed: #TComment.
	tComment comment: self commentForTComment.
	tWithComments := builder newTraitNamed: #TWithComments.
	tWithComments comment: self commentForTWithComments.
]
